{
  domain: { domain: 'String' },
  category: { domain: 'String' },
  required: { domain: 'Boolean' },
  fields: { domain: 'StringsArray' },
  unique: { domain: 'Boolean' }, // single field unique key
  hidden: { domain: 'Boolean' },
  readOnly: { domain: 'Boolean' },
  index: { domain: 'Boolean' }, // single field index
  default: { domain: 'String' }, // default value to be casted to domain
  example: { domain: 'String' },
  lookup: { domain: 'Boolean' }, // true if lookup result
  control: { domain: 'String' }, // GUI visual control name
  expression: { domain: 'Function' }, // (record, category) => (value)
  validate: { domain: 'Function' }, // (value) => (Boolean)
  normalize: { domain: 'Function' }, // (value, category, record) => (value)
  comment: { domain: 'String' },

  Check: Validate(data => {
    let kind = data.constructor.name;
    if (kind === 'Function') return true;

    const isDomain = !!data.domain;
    const isCategory = !!data.category;

    // Required just one of fields: domain or category
    if (
      isDomain === isCategory && kind !== 'Index' && kind !== 'Unique'
    ) {
      return false;
    }

    const fields = Object.keys(data);

    // Check allowed fields
    const allow = allowed => fields.every(f => allowed.includes(f));

    if (kind === 'Object' && isCategory) kind = 'Category';
    if (data.expression) kind = 'Expression';

    const allowedFields = {
      Index: ['fields'],
      Unique: ['fields'],
      Include: ['category', 'comment', 'required'],
      Master: ['category', 'control', 'comment', 'required'],
      Many: ['category', 'comment'],
      Category: ['category', 'lookup', 'required', 'control', 'comment'],
      Expression: ['domain', 'lookup', 'category', 'control', 'comment'],
      Object: [
        'domain', 'required', 'unique', 'hidden', 'readOnly', 'default',
        'example', 'control', 'validate', 'normalize', 'comment','index',
      ],
      Hierarchy: ['index', 'category'],
      Catalog: ['index', 'required', 'category'],
      Subdivision: ['index', 'required', 'category'],
    };

    const allowed = allowedFields[kind];
    if (!allowed) console.log(data);
    const fits = allow(allowed);
    if (!fits) return false;

    // Check index definition
    return !(data.index && data.unique);
  }),
}
